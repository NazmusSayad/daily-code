{"version":3,"file":"index.cjs","sources":["../src/base/array.ts","../src/base/hex-to-rgb.ts","../src/base/number.ts","../src/base/object.ts","../src/base/otp.ts","../src/base/string.ts","../src/base/wait.ts"],"sourcesContent":["/**\n * Creates an array of numbers from start (inclusive) to end (exclusive).\n * @param start The starting number (inclusive)\n * @param end The ending number (exclusive)\n * @returns An array of numbers from start to end - 1\n */\nexport function numberRange(start: number, end: number): number[] {\n  return Array.from({ length: end - start }, (_, i) => start + i)\n}\n\n/**\n * Returns a new array with the elements shuffled randomly.\n * @param arr The array to shuffle\n * @returns A new shuffled array\n */\nexport function arrayShuffle<T>(arr: T[]): T[] {\n  return [...arr].sort(() => Math.random() - 0.5)\n}\n\n/**\n * Splits an array into chunks of the specified size.\n * @param arr The array to chunk\n * @param size The size of each chunk\n * @returns An array of array chunks\n */\nexport function arrayChunk<T>(arr: T[], size: number): T[][] {\n  return Array.from({ length: Math.ceil(arr.length / size) }, (_, i) =>\n    arr.slice(i * size, i * size + size)\n  )\n}\n\n/**\n * Partitions an array into two arrays based on a predicate function.\n * @param arr The array to partition\n * @param predicate The function to test each element\n * @returns A tuple: [elements passing predicate, elements failing predicate]\n */\nexport function arrayPartition<T>(\n  arr: T[],\n  predicate: (v: T) => boolean\n): [T[], T[]] {\n  const pass: T[] = []\n  const fail: T[] = []\n  for (const item of arr) (predicate(item) ? pass : fail).push(item)\n  return [pass, fail]\n}\n","/**\n * Converts a hex color code to an RGB object.\n * @param hex - The hex color code to convert.\n * @returns An object with the red, green, and blue values.\n * @throws {Error} If the hex color code is invalid.\n * @example\n * ```js\n * hexToRGB('#ff0000') // { r: 255, g: 0, b: 0 }\n * ```\n */\nexport function hexToRGB(hex: string) {\n  let localHex = hex.toUpperCase()\n\n  if (/^#[0-9A-F]{3}$/.test(localHex)) {\n    localHex = `#${localHex[1]}${localHex[1]}${localHex[2]}${localHex[2]}${localHex[3]}${localHex[3]}`\n  }\n\n  if (!/^#[0-9A-F]{6}$/.test(localHex)) {\n    throw new Error('Invalid hex color code')\n  }\n\n  const color = localHex.replace('#', '')\n  const r = parseInt(color.substring(0, 2), 16)\n  const g = parseInt(color.substring(2, 4), 16)\n  const b = parseInt(color.substring(4, 6), 16)\n\n  return { r, g, b }\n}\n","/**\n * Generates a random integer between min and max (inclusive).\n * @param max Maximum value (default: 1)\n * @param min Minimum value (default: 0)\n * @returns Random integer between min and max\n * @example\n *   randomNumber(10, 5) // 5, 6, 7, 8, 9, or 10\n */\nexport function randomNumber(max = 1, min = 0) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n/**\n * Parses a string or number to a number, supporting 'px' units.\n * @param value The value to parse (string or number)\n * @returns The parsed number, or null if invalid\n */\nexport function getSizeAsNumber(value: string | number): number | null {\n  if (typeof value === 'number') return value\n\n  const floatValue = parseFloat(value)\n  if (isNaN(floatValue)) return null\n\n  if (value.endsWith('px')) return floatValue\n\n  if (String(floatValue) === value) return floatValue\n\n  return null\n}\n\n/**\n * Clamps a number between a minimum and maximum value.\n * @param num The number to clamp\n * @param min The minimum value\n * @param max The maximum value\n * @returns The clamped number\n */\nexport function numberClamp(num: number, min: number, max: number): number {\n  return Math.min(Math.max(num, min), max)\n}\n","/**\n * Creates a new object by picking the specified keys from the input object.\n * @param obj The source object\n * @param keys The keys to pick\n * @returns A new object with only the picked keys\n */\nexport function objectPick<T extends object, K extends keyof T>(\n  obj: T,\n  keys: K[]\n): Pick<T, K> {\n  return keys.reduce(\n    (res, key) => {\n      res[key] = obj[key]\n      return res\n    },\n    {} as Pick<T, K>\n  )\n}\n\n/**\n * Creates a new object by omitting the specified keys from the input object.\n * @param obj The source object\n * @param keys The keys to omit\n * @returns A new object without the omitted keys\n */\nexport function objectOmit<T extends object, K extends keyof T>(\n  obj: T,\n  keys: K[]\n): Omit<T, K> {\n  const result = { ...obj }\n  keys.forEach((k) => delete result[k])\n  return result\n}\n","function generateNumberOTP(length: number) {\n  return Array.from({ length }, () => Math.floor(Math.random() * 10)).join('')\n}\n\nfunction generateStringOTP(chars: string, length: number) {\n  return Array.from(\n    { length },\n    () => chars[Math.floor(Math.random() * chars.length)]\n  ).join('')\n}\n\nfunction generateAlphanumericOTP(length: number) {\n  return generateStringOTP(\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',\n    length\n  )\n}\n\nfunction generateBase64OTP(length: number) {\n  return generateStringOTP(\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    length\n  )\n}\n\nfunction generateLetterOtp(length: number) {\n  return generateStringOTP(\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n    length\n  )\n}\n\n/**\n * The available OTP generation types.\n */\nexport type OTPGenerationType =\n  | 'base64'\n  | 'digits'\n  | 'letters'\n  | 'letters-upper'\n  | 'letters-lower'\n  | 'alphanumeric'\n  | 'alphanumeric-upper'\n  | 'alphanumeric-lower'\n\n/**\n * Generates a one-time password (OTP) of the specified type and length.\n * @param type The OTP generation type\n * @param length The length of the OTP\n * @returns The generated OTP string\n * @throws {Error} If the OTP type is invalid\n */\nexport function generateOtp(type: OTPGenerationType, length: number): string {\n  if (type === 'digits') {\n    return generateNumberOTP(length)\n  } else if (type === 'base64') {\n    return generateBase64OTP(length)\n  } else if (type.startsWith('letters')) {\n    const otp = generateLetterOtp(length)\n\n    if (type === 'letters-upper') return otp.toUpperCase()\n    else if (type === 'letters-lower') return otp.toLowerCase()\n\n    return otp\n  } else if (type.startsWith('alphanumeric')) {\n    const otp = generateAlphanumericOTP(length)\n\n    if (type === 'alphanumeric-upper') return otp.toUpperCase()\n    else if (type === 'alphanumeric-lower') return otp.toLowerCase()\n\n    return otp\n  } else {\n    throw new Error('Invalid OTP type')\n  }\n}\n","/**\n * Capitalizes the first letter of a string.\n * @param str The string to capitalize\n * @returns The capitalized string\n */\nexport function stringCapitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\n/**\n * Converts a string to title case (first letter of each word capitalized).\n * @param str The string to convert\n * @returns The title-cased string\n */\nexport function stringToTitleCase(str: string): string {\n  return str.replace(\n    /\\w\\S*/g,\n    (w) => w[0].toUpperCase() + w.slice(1).toLowerCase()\n  )\n}\n","/**\n * Returns a promise that resolves after a specified duration (in milliseconds).\n * @param duration Time to wait in milliseconds (default: 0)\n * @returns Promise that resolves after the duration\n * @example\n *   await wait(1000) // waits 1 second\n */\nexport function wait(duration?: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, duration)\n  })\n}\n"],"names":[],"mappings":"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"}