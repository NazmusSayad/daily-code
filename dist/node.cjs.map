{"version":3,"file":"node.cjs","sources":["../src/node/node-md4.ts","../src/node/win-env.ts"],"sourcesContent":["import * as crypto from 'crypto'\n\n/**\n * Applies a workaround to the Node.js crypto module to support MD4 hashing.\n * This is necessary because MD4 is no longer supported in Node.js 20 and later.\n * @example\n * ```js\n * applyNodeMD4Issue()\n * ```\n */\nexport function applyNodeMD4Issue() {\n  try {\n    crypto.createHash('md4')\n  } catch {\n    console.warn(\n      'Crypto \"md4\" is not supported anymore by this Node version',\n      '\\n',\n      'Replacing \"md4\" with \"md5\"'\n    )\n\n    const origCreateHash = crypto.createHash\n\n    function fakeCreateHash(alg: string, opts: crypto.HashOptions) {\n      return origCreateHash(alg === 'md4' ? 'md5' : alg, opts)\n    }\n\n    // @ts-expect-error - This is a workaround to support MD4 hashing\n    crypto.createHash = fakeCreateHash\n  }\n}\n","import { spawnSync } from 'child_process'\n\nexport type Scope = 'Machine' | 'User'\n\n/**\n * Error thrown when environment variable operations fail.\n * @example\n *   throw new EnvError(1, 'Failed to set variable')\n */\nexport class EnvError extends Error {\n  name = 'EnvError' as const\n  code: number\n  constructor(code: number, message: string) {\n    super(message)\n    this.code = code\n    this.message = message\n  }\n}\n\n/**\n * Executes a PowerShell command and returns its output as a string.\n * Throws EnvError if the command fails.\n * @param command PowerShell command to execute\n * @returns Output of the command\n * @example\n *   execPwshCommand('echo Hello') // 'Hello'\n */\nexport function execPwshCommand(command: string) {\n  const result = spawnSync('powershell', ['-c', command])\n  if (result.status !== 0) {\n    throw new EnvError(result.status ?? 1, result.stderr.toString().trim())\n  }\n\n  return result.stdout.toString().trim()\n}\n\n/**\n * Reads an environment variable from the specified scope.\n * @param name Name of the environment variable\n * @param scope Scope to read from ('Machine' or 'User')\n * @returns Value of the environment variable\n * @example\n *   readEnv('PATH', 'User')\n */\nexport function readEnv(name: string, scope: Scope) {\n  return execPwshCommand(\n    `[System.Environment]::GetEnvironmentVariable(\"${name}\", [System.EnvironmentVariableTarget]::${scope})`\n  )\n}\n\n/**\n * Writes an environment variable to the specified scope.\n * @param name Name of the environment variable\n * @param value Value to set\n * @param scope Scope to write to ('Machine' or 'User')\n * @returns Output of the set command\n * @example\n *   writeEnv('MY_VAR', '123', 'User')\n */\nexport function writeEnv(name: string, value: string, scope: Scope) {\n  return execPwshCommand(\n    `[System.Environment]::SetEnvironmentVariable(\"${name}\", \"${value}\", [System.EnvironmentVariableTarget]::${scope})`\n  )\n}\n\n/**\n * Adds one or more paths to the PATH environment variable in the specified scope.\n * Ensures no duplicate paths are added.\n * @param scope Scope to update ('Machine' or 'User')\n * @param paths Paths to add\n * @returns Output of the set command\n * @example\n *   addToEnvPath('User', 'C:/My/Path')\n */\nexport function addToEnvPath(scope: Scope, ...paths: string[]) {\n  const existingPath = readEnv('PATH', scope)\n  const existingPathArray = existingPath.split(';').filter((p) => p)\n  const newPath = [...new Set([...existingPathArray, ...paths])].join(';')\n  return writeEnv('PATH', newPath, scope)\n}\n"],"names":["crypto","spawnSync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AAOG;SACa,iBAAiB,GAAA;AAC/B,IAAA,IAAI;AACF,QAAAA,iBAAM,CAAC,UAAU,CAAC,KAAK,CAAC;IAC1B;AAAE,IAAA,MAAM;QACN,OAAO,CAAC,IAAI,CACV,4DAA4D,EAC5D,IAAI,EACJ,4BAA4B,CAC7B;AAED,QAAA,MAAM,cAAc,GAAGA,iBAAM,CAAC,UAAU;AAExC,QAAA,SAAS,cAAc,CAAC,GAAW,EAAE,IAAwB,EAAA;AAC3D,YAAA,OAAO,cAAc,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG,GAAG,EAAE,IAAI,CAAC;QAC1D;;AAGA,QAAAA,iBAAM,CAAC,UAAU,GAAG,cAAc;IACpC;AACF;;ACzBA;;;;AAIG;AACG,MAAO,QAAS,SAAQ,KAAK,CAAA;IACjC,IAAI,GAAG,UAAmB;AAC1B,IAAA,IAAI;IACJ,WAAA,CAAY,IAAY,EAAE,OAAe,EAAA;QACvC,KAAK,CAAC,OAAO,CAAC;AACd,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI;AAChB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO;IACxB;AACD;AAED;;;;;;;AAOG;AACG,SAAU,eAAe,CAAC,OAAe,EAAA;AAC7C,IAAA,MAAM,MAAM,GAAGC,uBAAS,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACvD,IAAA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACvB,QAAA,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;IACzE;IAEA,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE;AACxC;AAEA;;;;;;;AAOG;AACG,SAAU,OAAO,CAAC,IAAY,EAAE,KAAY,EAAA;IAChD,OAAO,eAAe,CACpB,CAAA,8CAAA,EAAiD,IAAI,0CAA0C,KAAK,CAAA,CAAA,CAAG,CACxG;AACH;AAEA;;;;;;;;AAQG;SACa,QAAQ,CAAC,IAAY,EAAE,KAAa,EAAE,KAAY,EAAA;IAChE,OAAO,eAAe,CACpB,CAAA,8CAAA,EAAiD,IAAI,CAAA,IAAA,EAAO,KAAK,CAAA,uCAAA,EAA0C,KAAK,CAAA,CAAA,CAAG,CACpH;AACH;AAEA;;;;;;;;AAQG;SACa,YAAY,CAAC,KAAY,EAAE,GAAG,KAAe,EAAA;IAC3D,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC;AAC3C,IAAA,MAAM,iBAAiB,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAClE,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,iBAAiB,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACxE,OAAO,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC;AACzC;;;;;;;;;"}